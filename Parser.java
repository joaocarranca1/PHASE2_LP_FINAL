/* Parser.java */
/* Generated By:JavaCC: Do not edit this line. Parser.java */
import java.util.*;

public class Parser implements ParserConstants {
  public static Environment<ASTType> env = new Environment<>();

  static final public ASTNode Start() throws ParseException {ASTNode t;
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case 0:{
      jj_consume_token(0);
{if ("" != null) return null;}
      break;
      }
    case LET:
    case TRUE:
    case TYPE:
    case FALSE:
    case MINUS:
    case NIL:
    case TAG:
    case CONS:
    case MATCH:
    case LPAR:
    case LBRA:
    case DEREF:
    case NOT:
    case BOX:
    case IF:
    case WHILE:
    case PRINT:
    case PRINTLN:
    case FN:
    case String:
    case Id:
    case Num:{
      t = Program();
      jj_consume_token(TERM);
{if ("" != null) return t;}
      break;
      }
    default:
      jj_la1[0] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
}

  static final public ASTNode Program() throws ParseException {List<ASTNode> statements = new ArrayList<>();
    ASTNode stmt;
    stmt = TopLevelStmt();
statements.add(stmt);
    label_1:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case SEMIC:{
        ;
        break;
        }
      default:
        jj_la1[1] = jj_gen;
        break label_1;
      }
      jj_consume_token(SEMIC);
      stmt = TopLevelStmt();
statements.add(stmt);
    }
// Create a sequence of all statements
        ASTNode result = statements.get(0);
        for (int i = 1; i < statements.size(); i++) {
            result = new ASTSeq(result, statements.get(i));
        }
        {if ("" != null) return result;}
    throw new Error("Missing return statement in function");
}

  static final public ASTNode TopLevelStmt() throws ParseException {Token n;
    ASTType t1;
    ASTNode e1;
    HashMap<String, ASTType> lbl = new HashMap<>();
    if (jj_2_1(3)) {
      jj_consume_token(TYPE);
      n = jj_consume_token(Id);
      jj_consume_token(EQUAL);
      t1 = Type();
lbl.put(n.image, t1);
        {if ("" != null) return new ASTTypeDef(lbl, new ASTUnit());}
    } else if (jj_2_2(2)) {
      jj_consume_token(LET);
      n = jj_consume_token(Id);
ASTType t2 = null;
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case COLON:{
        jj_consume_token(COLON);
        t2 = Type();
        break;
        }
      default:
        jj_la1[2] = jj_gen;
        ;
      }
      jj_consume_token(EQUAL);
      e1 = BA();
List<Bind> decls = new ArrayList<>();
        decls.add(new Bind(n.image, e1, t2));
        {if ("" != null) return new ASTLet(decls, new ASTUnit());}
    } else {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case TRUE:
      case FALSE:
      case MINUS:
      case NIL:
      case TAG:
      case CONS:
      case MATCH:
      case LPAR:
      case LBRA:
      case DEREF:
      case NOT:
      case BOX:
      case IF:
      case WHILE:
      case PRINT:
      case PRINTLN:
      case FN:
      case String:
      case Id:
      case Num:{
        // Expression (handles complex lets, functions, etc.)
            e1 = Seq();
{if ("" != null) return e1;}
        break;
        }
      default:
        jj_la1[3] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
    throw new Error("Missing return statement in function");
}

  static final public ASTNode TypeDefs() throws ParseException {HashMap<String, ASTType> lbl = new HashMap<>();
    Token n;
    ASTType t1;
    label_2:
    while (true) {
      jj_consume_token(TYPE);
      n = jj_consume_token(Id);
      jj_consume_token(EQUAL);
      t1 = Type();
      jj_consume_token(SEMIC);
lbl.put(n.image, t1);
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case TYPE:{
        ;
        break;
        }
      default:
        jj_la1[4] = jj_gen;
        break label_2;
      }
    }
{if ("" != null) return new ASTTypeDef(lbl, new ASTUnit());}
    throw new Error("Missing return statement in function");
}

  static final public ASTNode Let() throws ParseException {Token n;
  ASTNode t, e1, e2;
  ASTType t1;
  List<Bind> decls = new ArrayList<>();
  Environment<ASTType> letEnv = env.beginScope();
    if (jj_2_3(3)) {
      label_3:
      while (true) {
        jj_consume_token(LET);
        n = jj_consume_token(Id);
ASTType t2 = null;
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case COLON:{
          jj_consume_token(COLON);
          t2 = Type();
          break;
          }
        default:
          jj_la1[5] = jj_gen;
          ;
        }
// Pre-register type for recursive functions in the let scope
              if (t2 != null) {
                  letEnv.preDeclareBind(n.image, t2);
              }
        jj_consume_token(EQUAL);
        e1 = Let();
        jj_consume_token(SEMIC);
decls.add(new Bind(n.image, e1, t2));
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case LET:{
          ;
          break;
          }
        default:
          jj_la1[6] = jj_gen;
          break label_3;
        }
      }
      e2 = Seq();
t = new ASTLet(decls, e2);
    } else if (jj_2_4(3)) {
HashMap<String, ASTType> lbl = new HashMap<>();
      label_4:
      while (true) {
        jj_consume_token(TYPE);
        n = jj_consume_token(Id);
        jj_consume_token(EQUAL);
        t1 = Type();
        jj_consume_token(SEMIC);
lbl.put(n.image, t1);
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case TYPE:{
          ;
          break;
          }
        default:
          jj_la1[7] = jj_gen;
          break label_4;
        }
      }
      e2 = Seq();
t = new ASTTypeDef(lbl, e2);
    } else {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case TRUE:
      case FALSE:
      case MINUS:
      case NIL:
      case TAG:
      case CONS:
      case MATCH:
      case LPAR:
      case LBRA:
      case DEREF:
      case NOT:
      case BOX:
      case IF:
      case WHILE:
      case PRINT:
      case PRINTLN:
      case FN:
      case String:
      case Id:
      case Num:{
        t = Seq();
        break;
        }
      default:
        jj_la1[8] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
{if ("" != null) return t;}
    throw new Error("Missing return statement in function");
}

  static final public ASTNode Seq() throws ParseException {Token op;
  ASTNode t1, t2;
    t1 = SeqExp();
    label_5:
    while (true) {
      if (jj_2_5(2)) {
        ;
      } else {
        break label_5;
      }
      op = jj_consume_token(SEMIC);
      t2 = SeqExp();
t1 = new ASTSeq(t1, t2);
    }
{if ("" != null) return t1;}
    throw new Error("Missing return statement in function");
}

  static final public ASTNode SeqExp() throws ParseException {Token op;
 ASTNode t1, t2;
    t1 = BA();
    label_6:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case ASSIGN:{
        ;
        break;
        }
      default:
        jj_la1[9] = jj_gen;
        break label_6;
      }
      op = jj_consume_token(ASSIGN);
      t2 = BA();
t1 = new ASTAssign(t1, t2);
    }
{if ("" != null) return t1;}
    throw new Error("Missing return statement in function");
}

  static final public ASTNode BA() throws ParseException {Token op;
    ASTNode t1, t2;
    t1 = BM();
    label_7:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case OR:{
        ;
        break;
        }
      default:
        jj_la1[10] = jj_gen;
        break label_7;
      }
      op = jj_consume_token(OR);
      t2 = BM();
t1 = new ASTOr(t1, t2);
    }
{if ("" != null) return t1;}
    throw new Error("Missing return statement in function");
}

  static final public ASTNode BM() throws ParseException {Token op;
    ASTNode t1, t2;
    t1 = Rel();
    label_8:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case AND:{
        ;
        break;
        }
      default:
        jj_la1[11] = jj_gen;
        break label_8;
      }
      op = jj_consume_token(AND);
      t2 = Rel();
t1 = new ASTAnd(t1, t2);
    }
{if ("" != null) return t1;}
    throw new Error("Missing return statement in function");
}

  static final public ASTNode Rel() throws ParseException {Token op;
  ASTNode t1, t2;
    t1 = ListExpr();
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case EQ:
    case GT:
    case LT:
    case GTEQ:
    case LTEQ:
    case DIF:{
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case EQ:{
        op = jj_consume_token(EQ);
        break;
        }
      case GT:{
        op = jj_consume_token(GT);
        break;
        }
      case LT:{
        op = jj_consume_token(LT);
        break;
        }
      case GTEQ:{
        op = jj_consume_token(GTEQ);
        break;
        }
      case LTEQ:{
        op = jj_consume_token(LTEQ);
        break;
        }
      case DIF:{
        op = jj_consume_token(DIF);
        break;
        }
      default:
        jj_la1[12] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      t2 = ListExpr();
switch (op.kind) {
           case EQ: t1 = new ASTEq(t1, t2); break;
           case GT: t1 = new ASTGt(t1, t2); break;
           case LT: t1 = new ASTLt(t1, t2); break;
           case GTEQ: t1 = new ASTGte(t1, t2); break;
           case LTEQ: t1 = new ASTLte(t1, t2); break;
           case DIF: t1 = new ASTNeq(t1, t2); break;
         }
      break;
      }
    default:
      jj_la1[13] = jj_gen;
      ;
    }
{if ("" != null) return t1;}
    throw new Error("Missing return statement in function");
}

  static final public ASTNode ListExpr() throws ParseException {ASTNode t1, t2; Token op;
    t1 = Exp();
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case LAZY_CONS_OP:
    case CONS_OP:{
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case CONS_OP:{
        op = jj_consume_token(CONS_OP);
        t2 = ListExpr();
t1 = new ASTCons(t1, t2);
        break;
        }
      case LAZY_CONS_OP:{
        op = jj_consume_token(LAZY_CONS_OP);
        t2 = ListExpr();
t1 = new ASTLazyCons(t1, t2);
        break;
        }
      default:
        jj_la1[14] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      break;
      }
    default:
      jj_la1[15] = jj_gen;
      ;
    }
{if ("" != null) return t1;}
    throw new Error("Missing return statement in function");
}

  static final public ASTNode Exp() throws ParseException {Token op;
  ASTNode t1, t2;
    t1 = Term();
    label_9:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case PLUS:
      case MINUS:{
        ;
        break;
        }
      default:
        jj_la1[16] = jj_gen;
        break label_9;
      }
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case PLUS:{
        op = jj_consume_token(PLUS);
        break;
        }
      case MINUS:{
        op = jj_consume_token(MINUS);
        break;
        }
      default:
        jj_la1[17] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      t2 = Term();
if (op.kind == PLUS)
                         t1 = new ASTPlus(t1,t2);
                   else  t1 = new ASTSub(t1,t2);
    }
{if ("" != null) return t1;}
    throw new Error("Missing return statement in function");
}

  static final public ASTNode Term() throws ParseException {Token op;
  ASTNode t1, t2;
    t1 = Apply();
    label_10:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case STAR:
      case DIV:{
        ;
        break;
        }
      default:
        jj_la1[18] = jj_gen;
        break label_10;
      }
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case STAR:{
        op = jj_consume_token(STAR);
        t2 = Apply();
t1 = new ASTMult(t1,t2);
        break;
        }
      case DIV:{
        op = jj_consume_token(DIV);
        t2 = Apply();
t1 = new ASTDiv(t1,t2);
        break;
        }
      default:
        jj_la1[19] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
{if ("" != null) return t1;}
    throw new Error("Missing return statement in function");
}

  static final public ASTNode Fact() throws ParseException {Token n, x, l, nilName;
    ASTNode t = null, e1, e2, body, alt;
    List<Bind> params = new ArrayList<>();
    List<String> paramNames = new ArrayList<>();  // Add this
    List<ASTType> paramTypes = new ArrayList<>(); // Add this
    ASTNode curriedBody;                         // Add this
    ASTType type = null;
    Map<String, ASTNode> fields;
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case Num:{
      n = jj_consume_token(Num);
t = new ASTInt(Integer.parseInt(n.image));
      break;
      }
    case TRUE:{
      n = jj_consume_token(TRUE);
t = new ASTBool(true);
      break;
      }
    case FALSE:{
      n = jj_consume_token(FALSE);
t = new ASTBool(false);
      break;
      }
    case Id:{
      n = jj_consume_token(Id);
t = new ASTId(n.image);
      break;
      }
    case BOX:{
      jj_consume_token(BOX);
      t = Fact();
t = new ASTBox(t);
      break;
      }
    case String:{
      n = jj_consume_token(String);
t = new ASTString(n.image.substring(1, n.image.length() - 1));
      break;
      }
    case DEREF:{
      jj_consume_token(DEREF);
      t = Fact();
t = new ASTDeref(t);
      break;
      }
    case NIL:{
      jj_consume_token(NIL);
t = new ASTNil();
      break;
      }
    case CONS:{
      jj_consume_token(CONS);
      jj_consume_token(LPAR);
      e1 = Let();
      jj_consume_token(COMMA);
      e2 = Let();
      jj_consume_token(RPAR);
t = new ASTCons(e1, e2);
      break;
      }
    case MATCH:{
      jj_consume_token(MATCH);
      t = Let();
      jj_consume_token(LBRA);
      if (jj_2_6(3)) {
        nilName = jj_consume_token(NIL);
        jj_consume_token(LISTARROW);
        e1 = Let();
        jj_consume_token(BAR);
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case LPAR:{
          jj_consume_token(LPAR);
          x = jj_consume_token(Id);
          jj_consume_token(CONS_OP);
          l = jj_consume_token(Id);
          jj_consume_token(RPAR);
          break;
          }
        case Id:{
          x = jj_consume_token(Id);
          jj_consume_token(CONS_OP);
          l = jj_consume_token(Id);
          break;
          }
        default:
          jj_la1[20] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
        jj_consume_token(LISTARROW);
        e2 = Let();
t = new ASTMatch(t, nilName.image, e1, x.image, l.image, e2);
      } else {
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case TAG:{
List<String> labels = new ArrayList<>();
            List<String> vars = new ArrayList<>();
            List<ASTNode> bodies = new ArrayList<>();
            ASTNode e;
          jj_consume_token(TAG);
          n = jj_consume_token(Id);
          jj_consume_token(LPAR);
          x = jj_consume_token(Id);
          jj_consume_token(RPAR);
          jj_consume_token(LISTARROW);
          e = Let();
labels.add(n.image);
            vars.add(x.image);
            bodies.add(e);
          label_11:
          while (true) {
            switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
            case BAR:{
              ;
              break;
              }
            default:
              jj_la1[21] = jj_gen;
              break label_11;
            }
            jj_consume_token(BAR);
            jj_consume_token(TAG);
            n = jj_consume_token(Id);
            jj_consume_token(LPAR);
            x = jj_consume_token(Id);
            jj_consume_token(RPAR);
            jj_consume_token(LISTARROW);
            e = Let();
labels.add(n.image);
                vars.add(x.image);
                bodies.add(e);
          }
t = new ASTUnionMatch(t, labels, vars, bodies);
          break;
          }
        default:
          jj_la1[22] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
      jj_consume_token(RBRA);
      break;
      }
    case MINUS:{
      jj_consume_token(MINUS);
      t = Fact();
t = new ASTNeg(t);
      break;
      }
    case NOT:{
      jj_consume_token(NOT);
      t = Fact();
t = new ASTNot(t);
      break;
      }
    case IF:{
      jj_consume_token(IF);
      t = BA();
      jj_consume_token(LBRA);
      e1 = Let();
      jj_consume_token(RBRA);
      jj_consume_token(ELSE);
      jj_consume_token(LBRA);
      e2 = Let();
      jj_consume_token(RBRA);
t = new ASTIf(t, e1, e2);
      break;
      }
    case WHILE:{
      jj_consume_token(WHILE);
      t = BA();
      jj_consume_token(LBRA);
      body = Let();
      jj_consume_token(RBRA);
t = new ASTWhile(t, body);
      break;
      }
    case FN:{
      jj_consume_token(FN);
      n = jj_consume_token(Id);
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case COLON:{
        jj_consume_token(COLON);
        type = Type();
        break;
        }
      default:
        jj_la1[23] = jj_gen;
        ;
      }
params.add(new Bind(n.image, null, type));
        paramNames.add(n.image);
        paramTypes.add(type);
      label_12:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case COMMA:{
          ;
          break;
          }
        default:
          jj_la1[24] = jj_gen;
          break label_12;
        }
        jj_consume_token(COMMA);
        n = jj_consume_token(Id);
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case COLON:{
          jj_consume_token(COLON);
          type = Type();
          break;
          }
        default:
          jj_la1[25] = jj_gen;
          ;
        }
params.add(new Bind(n.image, null, type));
        paramNames.add(n.image);
        paramTypes.add(type);
      }
      jj_consume_token(ARROW);
      jj_consume_token(LBRA);
      body = Let();
      jj_consume_token(RBRA);
// Create nested functions for currying
        curriedBody = body;
        for (int i = paramNames.size() - 1; i >= 0; i--) {
            List<String> singleParam = List.of(paramNames.get(i));
            List<ASTType> singleType = List.of(paramTypes.get(i));
            curriedBody = new ASTFn(singleParam, singleType, curriedBody);
        }
        t = curriedBody;
      break;
      }
    case PRINT:{
      jj_consume_token(PRINT);
      t = Fact();
t = new ASTPrint(t);
      break;
      }
    case PRINTLN:{
      jj_consume_token(PRINTLN);
      t = Fact();
t = new ASTPrintln(t);
      break;
      }
    default:
      jj_la1[27] = jj_gen;
      if (jj_2_7(5)) {
        jj_consume_token(LPAR);
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case LET:
        case TRUE:
        case TYPE:
        case FALSE:
        case MINUS:
        case NIL:
        case TAG:
        case CONS:
        case MATCH:
        case LPAR:
        case LBRA:
        case DEREF:
        case NOT:
        case BOX:
        case IF:
        case WHILE:
        case PRINT:
        case PRINTLN:
        case FN:
        case String:
        case Id:
        case Num:{
          t = Let();
          break;
          }
        default:
          jj_la1[26] = jj_gen;
          ;
        }
        jj_consume_token(RPAR);
if (t == null) {
            t = new ASTUnit();  // Empty parentheses = unit value
        }
        // Otherwise t is already the parenthesized expression

      } else {
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case TAG:{
          jj_consume_token(TAG);
          n = jj_consume_token(Id);
          jj_consume_token(LPAR);
          t = Let();
          jj_consume_token(RPAR);
t = new ASTUnionValue(n.image, t);
          break;
          }
        case LBRA:{
          jj_consume_token(LBRA);
          fields = StructFieldList();
          jj_consume_token(RBRA);
if (fields.isEmpty()) {
            t = new ASTUnit();
        } else {
            t = new ASTStruct(fields);
        }
          break;
          }
        default:
          jj_la1[28] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
    }
{if ("" != null) return t;}
    throw new Error("Missing return statement in function");
}

  static final public Map<String, ASTNode> StructFieldList() throws ParseException {Map<String, ASTNode> fields = new HashMap<>();
    Token l;
    ASTNode value;
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case TAG:{
      jj_consume_token(TAG);
      l = jj_consume_token(Id);
      jj_consume_token(EQUAL);
      value = Let();
fields.put(l.image, value);
      label_13:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case COMMA:{
          ;
          break;
          }
        default:
          jj_la1[29] = jj_gen;
          break label_13;
        }
        jj_consume_token(COMMA);
        jj_consume_token(TAG);
        l = jj_consume_token(Id);
        jj_consume_token(EQUAL);
        value = Let();
fields.put(l.image, value);
      }
      break;
      }
    default:
      jj_la1[30] = jj_gen;
      ;
    }
{if ("" != null) return fields;}
    throw new Error("Missing return statement in function");
}

  static final public ASTNode Apply() throws ParseException {ASTNode t;
    ASTNode arg;
    Token l;
    t = Fact();
    label_14:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case DOT:
      case LPAR:{
        ;
        break;
        }
      default:
        jj_la1[31] = jj_gen;
        break label_14;
      }
      if (jj_2_8(3)) {
        jj_consume_token(LPAR);
        arg = Let();
        jj_consume_token(RPAR);
t = new ASTApp(t, List.of(arg));
      } else {
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case DOT:{
          jj_consume_token(DOT);
          jj_consume_token(TAG);
          l = jj_consume_token(Id);
t = new ASTFieldAccess(t, l.image);
          break;
          }
        default:
          jj_la1[32] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
    }
{if ("" != null) return t;}
    throw new Error("Missing return statement in function");
}

  static final public List<ASTNode> ArgList() throws ParseException {List<ASTNode> args = new ArrayList<>();
    ASTNode arg;
    arg = Let();
args.add(arg);
    label_15:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case COMMA:{
        ;
        break;
        }
      default:
        jj_la1[33] = jj_gen;
        break label_15;
      }
      jj_consume_token(COMMA);
      arg = Let();
args.add(arg);
    }
{if ("" != null) return args;}
    throw new Error("Missing return statement in function");
}

  static final public ASTType Type() throws ParseException {ASTType t1, t2;
    t1 = TypeF();
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case LISTARROW:{
      jj_consume_token(LISTARROW);
      t2 = Type();
// Create a single arrow type for curried functions
        t1 = new ASTTArrow(t1, t2);
      break;
      }
    default:
      jj_la1[34] = jj_gen;
      ;
    }
{if ("" != null) return t1;}
    throw new Error("Missing return statement in function");
}

  static final public TypeBindList LabelList() throws ParseException {ASTType t;
  HashMap<String,ASTType> ll;
  Token n;
ll = new HashMap<String,ASTType>() ;
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case TAG:{
      jj_consume_token(TAG);
      n = jj_consume_token(Id);
      jj_consume_token(COLON);
      t = Type();
ll.put(n.image,t);
      label_16:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case COMMA:{
          ;
          break;
          }
        default:
          jj_la1[35] = jj_gen;
          break label_16;
        }
        jj_consume_token(COMMA);
        jj_consume_token(TAG);
        n = jj_consume_token(Id);
        jj_consume_token(COLON);
        t = Type();
ll.put(n.image,t);
      }
      break;
      }
    default:
      jj_la1[36] = jj_gen;
      ;
    }
{if ("" != null) return new TypeBindList(ll);}
    throw new Error("Missing return statement in function");
}

  static final public ASTType TypeF() throws ParseException {ASTType t = null;
  TypeBindList ll;
  Token n;
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case INT:{
      jj_consume_token(INT);
t = new ASTTInt();
      break;
      }
    case Id:{
      n = jj_consume_token(Id);
t = new ASTTId(n.image);
      break;
      }
    case BOOL:{
      jj_consume_token(BOOL);
t = new ASTTBool();
      break;
      }
    case UNIT:{
      jj_consume_token(UNIT);
t = new ASTTUnit();
      break;
      }
    case STRING:{
      jj_consume_token(STRING);
t = new ASTTString();
      break;
      }
    case REF:{
      jj_consume_token(REF);
      jj_consume_token(LT);
      t = Type();
      jj_consume_token(GT);
t = new ASTTRef(t);
      break;
      }
    case LIST:{
      jj_consume_token(LIST);
      jj_consume_token(LT);
      t = Type();
      jj_consume_token(GT);
t = new ASTTList(t);
      break;
      }
    case STRUCT:{
      jj_consume_token(STRUCT);
      jj_consume_token(LBRA);
      ll = LabelList();
      jj_consume_token(RBRA);
t = new ASTTStruct(ll); {if ("" != null) return t;}
      break;
      }
    case UNION:{
      jj_consume_token(UNION);
      jj_consume_token(LBRA);
      ll = LabelList();
      jj_consume_token(RBRA);
t = new ASTTUnion(ll); {if ("" != null) return t;}
      break;
      }
    case LPAR:{
      jj_consume_token(LPAR);
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case INT:
      case BOOL:
      case UNIT:
      case STRING:
      case REF:
      case LIST:
      case STRUCT:
      case UNION:
      case LPAR:
      case Id:{
        t = Type();
        break;
        }
      default:
        jj_la1[37] = jj_gen;
        ;
      }
      jj_consume_token(RPAR);
if (t == null) {
                t = new ASTTUnit(); // () as a type
            }
            {if ("" != null) return t;}
      break;
      }
    default:
      jj_la1[38] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
{if ("" != null) return t;}
    throw new Error("Missing return statement in function");
}

  static private boolean jj_2_1(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_1()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(0, xla); }
  }

  static private boolean jj_2_2(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_2()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(1, xla); }
  }

  static private boolean jj_2_3(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_3()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(2, xla); }
  }

  static private boolean jj_2_4(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_4()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(3, xla); }
  }

  static private boolean jj_2_5(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_5()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(4, xla); }
  }

  static private boolean jj_2_6(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_6()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(5, xla); }
  }

  static private boolean jj_2_7(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_7()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(6, xla); }
  }

  static private boolean jj_2_8(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_8()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(7, xla); }
  }

  static private boolean jj_3R_TypeF_561_11_44()
 {
    if (jj_scan_token(LPAR)) return true;
    return false;
  }

  static private boolean jj_3R_TypeF_560_11_43()
 {
    if (jj_scan_token(UNION)) return true;
    return false;
  }

  static private boolean jj_3R_Term_369_10_75()
 {
    if (jj_scan_token(DIV)) return true;
    if (jj_3R_Apply_497_5_46()) return true;
    return false;
  }

  static private boolean jj_3R_TypeF_559_11_42()
 {
    if (jj_scan_token(STRUCT)) return true;
    return false;
  }

  static private boolean jj_3R_TypeF_558_11_41()
 {
    if (jj_scan_token(LIST)) return true;
    return false;
  }

  static private boolean jj_3R_Term_367_10_74()
 {
    if (jj_scan_token(STAR)) return true;
    if (jj_3R_Apply_497_5_46()) return true;
    return false;
  }

  static private boolean jj_3R_Term_367_10_72()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_Term_367_10_74()) {
    jj_scanpos = xsp;
    if (jj_3R_Term_369_10_75()) return true;
    }
    return false;
  }

  static private boolean jj_3R_TypeF_557_11_40()
 {
    if (jj_scan_token(REF)) return true;
    return false;
  }

  static private boolean jj_3R_TypeF_556_11_39()
 {
    if (jj_scan_token(STRING)) return true;
    return false;
  }

  static private boolean jj_3R_TypeF_555_11_38()
 {
    if (jj_scan_token(UNIT)) return true;
    return false;
  }

  static private boolean jj_3_2()
 {
    if (jj_scan_token(LET)) return true;
    if (jj_scan_token(Id)) return true;
    return false;
  }

  static private boolean jj_3R_TypeF_554_11_37()
 {
    if (jj_scan_token(BOOL)) return true;
    return false;
  }

  static private boolean jj_3R_TypeF_553_11_36()
 {
    if (jj_scan_token(Id)) return true;
    return false;
  }

  static private boolean jj_3R_Term_366_6_34()
 {
    if (jj_3R_Apply_497_5_46()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_Term_367_10_72()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  static private boolean jj_3R_TypeF_552_11_35()
 {
    if (jj_scan_token(INT)) return true;
    return false;
  }

  static private boolean jj_3R_Exp_353_18_69()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(17)) {
    jj_scanpos = xsp;
    if (jj_scan_token(18)) return true;
    }
    if (jj_3R_Term_366_6_34()) return true;
    return false;
  }

  static private boolean jj_3_1()
 {
    if (jj_scan_token(TYPE)) return true;
    if (jj_scan_token(Id)) return true;
    if (jj_scan_token(EQUAL)) return true;
    return false;
  }

  static private boolean jj_3R_TypeF_551_5_32()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_TypeF_552_11_35()) {
    jj_scanpos = xsp;
    if (jj_3R_TypeF_553_11_36()) {
    jj_scanpos = xsp;
    if (jj_3R_TypeF_554_11_37()) {
    jj_scanpos = xsp;
    if (jj_3R_TypeF_555_11_38()) {
    jj_scanpos = xsp;
    if (jj_3R_TypeF_556_11_39()) {
    jj_scanpos = xsp;
    if (jj_3R_TypeF_557_11_40()) {
    jj_scanpos = xsp;
    if (jj_3R_TypeF_558_11_41()) {
    jj_scanpos = xsp;
    if (jj_3R_TypeF_559_11_42()) {
    jj_scanpos = xsp;
    if (jj_3R_TypeF_560_11_43()) {
    jj_scanpos = xsp;
    if (jj_3R_TypeF_561_11_44()) return true;
    }
    }
    }
    }
    }
    }
    }
    }
    }
    return false;
  }

  static private boolean jj_3R_Exp_353_6_31()
 {
    if (jj_3R_Term_366_6_34()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_Exp_353_18_69()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  static private boolean jj_3R_ListExpr_338_9_71()
 {
    if (jj_scan_token(LAZY_CONS_OP)) return true;
    if (jj_3R_ListExpr_333_5_28()) return true;
    return false;
  }

  static private boolean jj_3R_ListExpr_334_9_49()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_ListExpr_334_9_70()) {
    jj_scanpos = xsp;
    if (jj_3R_ListExpr_338_9_71()) return true;
    }
    return false;
  }

  static private boolean jj_3R_ListExpr_334_9_70()
 {
    if (jj_scan_token(CONS_OP)) return true;
    if (jj_3R_ListExpr_333_5_28()) return true;
    return false;
  }

  static private boolean jj_3R_ListExpr_333_5_28()
 {
    if (jj_3R_Exp_353_6_31()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_ListExpr_334_9_49()) jj_scanpos = xsp;
    return false;
  }

  static private boolean jj_3R_Type_524_5_29()
 {
    if (jj_3R_TypeF_551_5_32()) return true;
    return false;
  }

  static private boolean jj_3R_Rel_314_8_47()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(41)) {
    jj_scanpos = xsp;
    if (jj_scan_token(42)) {
    jj_scanpos = xsp;
    if (jj_scan_token(43)) {
    jj_scanpos = xsp;
    if (jj_scan_token(44)) {
    jj_scanpos = xsp;
    if (jj_scan_token(45)) {
    jj_scanpos = xsp;
    if (jj_scan_token(46)) return true;
    }
    }
    }
    }
    }
    if (jj_3R_ListExpr_333_5_28()) return true;
    return false;
  }

  static private boolean jj_3R_Apply_502_9_76()
 {
    if (jj_scan_token(DOT)) return true;
    if (jj_scan_token(TAG)) return true;
    if (jj_scan_token(Id)) return true;
    return false;
  }

  static private boolean jj_3R_Rel_312_6_27()
 {
    if (jj_3R_ListExpr_333_5_28()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_Rel_314_8_47()) jj_scanpos = xsp;
    return false;
  }

  static private boolean jj_3R_Apply_499_9_73()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_8()) {
    jj_scanpos = xsp;
    if (jj_3R_Apply_502_9_76()) return true;
    }
    return false;
  }

  static private boolean jj_3_8()
 {
    if (jj_scan_token(LPAR)) return true;
    if (jj_3R_Let_209_5_20()) return true;
    if (jj_scan_token(RPAR)) return true;
    return false;
  }

  static private boolean jj_3R_Apply_497_5_46()
 {
    if (jj_3R_Fact_386_4_48()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_Apply_499_9_73()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  static private boolean jj_3R_BM_298_9_45()
 {
    if (jj_scan_token(AND)) return true;
    if (jj_3R_Rel_312_6_27()) return true;
    return false;
  }

  static private boolean jj_3R_StructFieldList_484_9_81()
 {
    if (jj_scan_token(TAG)) return true;
    if (jj_scan_token(Id)) return true;
    if (jj_scan_token(EQUAL)) return true;
    return false;
  }

  static private boolean jj_3R_BM_296_5_25()
 {
    if (jj_3R_Rel_312_6_27()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_BM_298_9_45()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  static private boolean jj_3R_StructFieldList_483_5_77()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_StructFieldList_484_9_81()) jj_scanpos = xsp;
    return false;
  }

  static private boolean jj_3R_Fact_458_28_21()
 {
    if (jj_3R_Let_209_5_20()) return true;
    return false;
  }

  static private boolean jj_3R_BA_282_9_33()
 {
    if (jj_scan_token(OR)) return true;
    if (jj_3R_BM_296_5_25()) return true;
    return false;
  }

  static private boolean jj_3R_BA_280_5_23()
 {
    if (jj_3R_BM_296_5_25()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_BA_282_9_33()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  static private boolean jj_3R_Fact_465_7_68()
 {
    if (jj_scan_token(LBRA)) return true;
    if (jj_3R_StructFieldList_483_5_77()) return true;
    if (jj_scan_token(RBRA)) return true;
    return false;
  }

  static private boolean jj_3R_Fact_464_7_67()
 {
    if (jj_scan_token(TAG)) return true;
    if (jj_scan_token(Id)) return true;
    if (jj_scan_token(LPAR)) return true;
    if (jj_3R_Let_209_5_20()) return true;
    return false;
  }

  static private boolean jj_3_7()
 {
    if (jj_scan_token(LPAR)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_Fact_458_28_21()) jj_scanpos = xsp;
    if (jj_scan_token(RPAR)) return true;
    return false;
  }

  static private boolean jj_3R_Fact_457_7_66()
 {
    if (jj_scan_token(PRINTLN)) return true;
    if (jj_3R_Fact_386_4_48()) return true;
    return false;
  }

  static private boolean jj_3R_Fact_456_7_65()
 {
    if (jj_scan_token(PRINT)) return true;
    if (jj_3R_Fact_386_4_48()) return true;
    return false;
  }

  static private boolean jj_3R_SeqExp_265_5_30()
 {
    if (jj_scan_token(ASSIGN)) return true;
    if (jj_3R_BA_280_5_23()) return true;
    return false;
  }

  static private boolean jj_3R_Fact_436_21_79()
 {
    if (jj_scan_token(COLON)) return true;
    if (jj_3R_Type_524_5_29()) return true;
    return false;
  }

  static private boolean jj_3R_SeqExp_263_3_19()
 {
    if (jj_3R_BA_280_5_23()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_SeqExp_265_5_30()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  static private boolean jj_3R_Let_212_49_22()
 {
    if (jj_scan_token(COLON)) return true;
    if (jj_3R_Type_524_5_29()) return true;
    return false;
  }

  static private boolean jj_3R_Fact_441_6_80()
 {
    if (jj_scan_token(COMMA)) return true;
    if (jj_scan_token(Id)) return true;
    return false;
  }

  static private boolean jj_3_5()
 {
    if (jj_scan_token(SEMIC)) return true;
    if (jj_3R_SeqExp_263_3_19()) return true;
    return false;
  }

  static private boolean jj_3R_Seq_246_5_26()
 {
    if (jj_3R_SeqExp_263_3_19()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3_5()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  static private boolean jj_3R_Fact_435_7_63()
 {
    if (jj_scan_token(WHILE)) return true;
    if (jj_3R_BA_280_5_23()) return true;
    if (jj_scan_token(LBRA)) return true;
    if (jj_3R_Let_209_5_20()) return true;
    return false;
  }

  static private boolean jj_3R_Fact_436_6_64()
 {
    if (jj_scan_token(FN)) return true;
    if (jj_scan_token(Id)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_Fact_436_21_79()) jj_scanpos = xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_Fact_441_6_80()) { jj_scanpos = xsp; break; }
    }
    if (jj_scan_token(ARROW)) return true;
    if (jj_scan_token(LBRA)) return true;
    return false;
  }

  static private boolean jj_3R_Fact_434_7_62()
 {
    if (jj_scan_token(IF)) return true;
    if (jj_3R_BA_280_5_23()) return true;
    if (jj_scan_token(LBRA)) return true;
    if (jj_3R_Let_209_5_20()) return true;
    return false;
  }

  static private boolean jj_3R_Fact_433_7_61()
 {
    if (jj_scan_token(NOT)) return true;
    if (jj_3R_Fact_386_4_48()) return true;
    return false;
  }

  static private boolean jj_3R_Fact_432_7_60()
 {
    if (jj_scan_token(MINUS)) return true;
    if (jj_3R_Fact_386_4_48()) return true;
    return false;
  }

  static private boolean jj_3R_Let_236_7_24()
 {
    if (jj_3R_Seq_246_5_26()) return true;
    return false;
  }

  static private boolean jj_3R_Let_230_12_18()
 {
    if (jj_scan_token(TYPE)) return true;
    if (jj_scan_token(Id)) return true;
    if (jj_scan_token(EQUAL)) return true;
    if (jj_3R_Type_524_5_29()) return true;
    return false;
  }

  static private boolean jj_3_4()
 {
    Token xsp;
    if (jj_3R_Let_230_12_18()) return true;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_Let_230_12_18()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  static private boolean jj_3R_Fact_409_9_78()
 {
    if (jj_scan_token(TAG)) return true;
    return false;
  }

  static private boolean jj_3R_Let_212_10_17()
 {
    if (jj_scan_token(LET)) return true;
    if (jj_scan_token(Id)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_Let_212_49_22()) jj_scanpos = xsp;
    if (jj_scan_token(EQUAL)) return true;
    if (jj_3R_Let_209_5_20()) return true;
    return false;
  }

  static private boolean jj_3_3()
 {
    Token xsp;
    if (jj_3R_Let_212_10_17()) return true;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_Let_212_10_17()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  static private boolean jj_3_6()
 {
    if (jj_scan_token(NIL)) return true;
    if (jj_scan_token(LISTARROW)) return true;
    if (jj_3R_Let_209_5_20()) return true;
    return false;
  }

  static private boolean jj_3R_Let_209_5_20()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_3()) {
    jj_scanpos = xsp;
    if (jj_3_4()) {
    jj_scanpos = xsp;
    if (jj_3R_Let_236_7_24()) return true;
    }
    }
    return false;
  }

  static private boolean jj_3R_Fact_396_7_59()
 {
    if (jj_scan_token(MATCH)) return true;
    if (jj_3R_Let_209_5_20()) return true;
    if (jj_scan_token(LBRA)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_6()) {
    jj_scanpos = xsp;
    if (jj_3R_Fact_409_9_78()) return true;
    }
    return false;
  }

  static private boolean jj_3R_Fact_395_7_58()
 {
    if (jj_scan_token(CONS)) return true;
    if (jj_scan_token(LPAR)) return true;
    if (jj_3R_Let_209_5_20()) return true;
    if (jj_scan_token(COMMA)) return true;
    return false;
  }

  static private boolean jj_3R_Fact_394_7_57()
 {
    if (jj_scan_token(NIL)) return true;
    return false;
  }

  static private boolean jj_3R_Fact_393_7_56()
 {
    if (jj_scan_token(DEREF)) return true;
    if (jj_3R_Fact_386_4_48()) return true;
    return false;
  }

  static private boolean jj_3R_Fact_392_7_55()
 {
    if (jj_scan_token(String)) return true;
    return false;
  }

  static private boolean jj_3R_Fact_391_7_54()
 {
    if (jj_scan_token(BOX)) return true;
    if (jj_3R_Fact_386_4_48()) return true;
    return false;
  }

  static private boolean jj_3R_Fact_390_7_53()
 {
    if (jj_scan_token(Id)) return true;
    return false;
  }

  static private boolean jj_3R_Fact_389_7_52()
 {
    if (jj_scan_token(FALSE)) return true;
    return false;
  }

  static private boolean jj_3R_Fact_388_7_51()
 {
    if (jj_scan_token(TRUE)) return true;
    return false;
  }

  static private boolean jj_3R_Fact_387_7_50()
 {
    if (jj_scan_token(Num)) return true;
    return false;
  }

  static private boolean jj_3R_Fact_386_4_48()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_Fact_387_7_50()) {
    jj_scanpos = xsp;
    if (jj_3R_Fact_388_7_51()) {
    jj_scanpos = xsp;
    if (jj_3R_Fact_389_7_52()) {
    jj_scanpos = xsp;
    if (jj_3R_Fact_390_7_53()) {
    jj_scanpos = xsp;
    if (jj_3R_Fact_391_7_54()) {
    jj_scanpos = xsp;
    if (jj_3R_Fact_392_7_55()) {
    jj_scanpos = xsp;
    if (jj_3R_Fact_393_7_56()) {
    jj_scanpos = xsp;
    if (jj_3R_Fact_394_7_57()) {
    jj_scanpos = xsp;
    if (jj_3R_Fact_395_7_58()) {
    jj_scanpos = xsp;
    if (jj_3R_Fact_396_7_59()) {
    jj_scanpos = xsp;
    if (jj_3R_Fact_432_7_60()) {
    jj_scanpos = xsp;
    if (jj_3R_Fact_433_7_61()) {
    jj_scanpos = xsp;
    if (jj_3R_Fact_434_7_62()) {
    jj_scanpos = xsp;
    if (jj_3R_Fact_435_7_63()) {
    jj_scanpos = xsp;
    if (jj_3R_Fact_436_6_64()) {
    jj_scanpos = xsp;
    if (jj_3R_Fact_456_7_65()) {
    jj_scanpos = xsp;
    if (jj_3R_Fact_457_7_66()) {
    jj_scanpos = xsp;
    if (jj_3_7()) {
    jj_scanpos = xsp;
    if (jj_3R_Fact_464_7_67()) {
    jj_scanpos = xsp;
    if (jj_3R_Fact_465_7_68()) return true;
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    return false;
  }

  static private boolean jj_initialized_once = false;
  /** Generated Token Manager. */
  static public ParserTokenManager token_source;
  static SimpleCharStream jj_input_stream;
  /** Current token. */
  static public Token token;
  /** Next token. */
  static public Token jj_nt;
  static private int jj_ntk;
  static private Token jj_scanpos, jj_lastpos;
  static private int jj_la;
  static private int jj_gen;
  static final private int[] jj_la1 = new int[39];
  static private int[] jj_la1_0;
  static private int[] jj_la1_1;
  static {
	   jj_la1_init_0();
	   jj_la1_init_1();
	}
	private static void jj_la1_init_0() {
	   jj_la1_0 = new int[] {0xab25c021,0x0,0x0,0xab254000,0x8000,0x0,0x20,0x8000,0xab254000,0x0,0x0,0x0,0x0,0x0,0x4100000,0x4100000,0x60000,0x60000,0x10080000,0x10080000,0x20000000,0x400000,0x1000000,0x0,0x0,0x0,0xab25c020,0xa254000,0x81000000,0x0,0x1000000,0x20800000,0x800000,0x0,0x0,0x0,0x1000000,0x20003fc0,0x20003fc0,};
	}
	private static void jj_la1_init_1() {
	   jj_la1_1 = new int[] {0x1cf68040,0x8,0x4,0x1cf68040,0x0,0x4,0x0,0x0,0x1cf68040,0x10000,0x100,0x80,0x7e00,0x7e00,0x0,0x0,0x0,0x0,0x0,0x0,0x8000000,0x0,0x0,0x4,0x20,0x4,0x1cf68040,0x1cf68040,0x0,0x20,0x0,0x0,0x0,0x20,0x2000000,0x20,0x0,0x8000000,0x8000000,};
	}
  static final private JJCalls[] jj_2_rtns = new JJCalls[8];
  static private boolean jj_rescan = false;
  static private int jj_gc = 0;

  /** Constructor with InputStream. */
  public Parser(java.io.InputStream stream) {
	  this(stream, null);
  }
  /** Constructor with InputStream and supplied encoding */
  public Parser(java.io.InputStream stream, String encoding) {
	 if (jj_initialized_once) {
	   System.out.println("ERROR: Second call to constructor of static parser.  ");
	   System.out.println("	   You must either use ReInit() or set the JavaCC option STATIC to false");
	   System.out.println("	   during parser generation.");
	   throw new Error();
	 }
	 jj_initialized_once = true;
	 try { jj_input_stream = new SimpleCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
	 token_source = new ParserTokenManager(jj_input_stream);
	 token = new Token();
	 jj_ntk = -1;
	 jj_gen = 0;
	 for (int i = 0; i < 39; i++) jj_la1[i] = -1;
	 for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  static public void ReInit(java.io.InputStream stream) {
	  ReInit(stream, null);
  }
  /** Reinitialise. */
  static public void ReInit(java.io.InputStream stream, String encoding) {
	 try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
	 token_source.ReInit(jj_input_stream);
	 token = new Token();
	 jj_ntk = -1;
	 jj_gen = 0;
	 for (int i = 0; i < 39; i++) jj_la1[i] = -1;
	 for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Constructor. */
  public Parser(java.io.Reader stream) {
	 if (jj_initialized_once) {
	   System.out.println("ERROR: Second call to constructor of static parser. ");
	   System.out.println("	   You must either use ReInit() or set the JavaCC option STATIC to false");
	   System.out.println("	   during parser generation.");
	   throw new Error();
	 }
	 jj_initialized_once = true;
	 jj_input_stream = new SimpleCharStream(stream, 1, 1);
	 token_source = new ParserTokenManager(jj_input_stream);
	 token = new Token();
	 jj_ntk = -1;
	 jj_gen = 0;
	 for (int i = 0; i < 39; i++) jj_la1[i] = -1;
	 for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  static public void ReInit(java.io.Reader stream) {
	if (jj_input_stream == null) {
	   jj_input_stream = new SimpleCharStream(stream, 1, 1);
	} else {
	   jj_input_stream.ReInit(stream, 1, 1);
	}
	if (token_source == null) {
 token_source = new ParserTokenManager(jj_input_stream);
	}

	 token_source.ReInit(jj_input_stream);
	 token = new Token();
	 jj_ntk = -1;
	 jj_gen = 0;
	 for (int i = 0; i < 39; i++) jj_la1[i] = -1;
	 for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Constructor with generated Token Manager. */
  public Parser(ParserTokenManager tm) {
	 if (jj_initialized_once) {
	   System.out.println("ERROR: Second call to constructor of static parser. ");
	   System.out.println("	   You must either use ReInit() or set the JavaCC option STATIC to false");
	   System.out.println("	   during parser generation.");
	   throw new Error();
	 }
	 jj_initialized_once = true;
	 token_source = tm;
	 token = new Token();
	 jj_ntk = -1;
	 jj_gen = 0;
	 for (int i = 0; i < 39; i++) jj_la1[i] = -1;
	 for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  public void ReInit(ParserTokenManager tm) {
	 token_source = tm;
	 token = new Token();
	 jj_ntk = -1;
	 jj_gen = 0;
	 for (int i = 0; i < 39; i++) jj_la1[i] = -1;
	 for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  static private Token jj_consume_token(int kind) throws ParseException {
	 Token oldToken;
	 if ((oldToken = token).next != null) token = token.next;
	 else token = token.next = token_source.getNextToken();
	 jj_ntk = -1;
	 if (token.kind == kind) {
	   jj_gen++;
	   if (++jj_gc > 100) {
		 jj_gc = 0;
		 for (int i = 0; i < jj_2_rtns.length; i++) {
		   JJCalls c = jj_2_rtns[i];
		   while (c != null) {
			 if (c.gen < jj_gen) c.first = null;
			 c = c.next;
		   }
		 }
	   }
	   return token;
	 }
	 token = oldToken;
	 jj_kind = kind;
	 throw generateParseException();
  }

  @SuppressWarnings("serial")
  static private final class LookaheadSuccess extends java.lang.Error {
    @Override
    public Throwable fillInStackTrace() {
      return this;
    }
  }
  static private final LookaheadSuccess jj_ls = new LookaheadSuccess();
  static private boolean jj_scan_token(int kind) {
	 if (jj_scanpos == jj_lastpos) {
	   jj_la--;
	   if (jj_scanpos.next == null) {
		 jj_lastpos = jj_scanpos = jj_scanpos.next = token_source.getNextToken();
	   } else {
		 jj_lastpos = jj_scanpos = jj_scanpos.next;
	   }
	 } else {
	   jj_scanpos = jj_scanpos.next;
	 }
	 if (jj_rescan) {
	   int i = 0; Token tok = token;
	   while (tok != null && tok != jj_scanpos) { i++; tok = tok.next; }
	   if (tok != null) jj_add_error_token(kind, i);
	 }
	 if (jj_scanpos.kind != kind) return true;
	 if (jj_la == 0 && jj_scanpos == jj_lastpos) throw jj_ls;
	 return false;
  }


/** Get the next Token. */
  static final public Token getNextToken() {
	 if (token.next != null) token = token.next;
	 else token = token.next = token_source.getNextToken();
	 jj_ntk = -1;
	 jj_gen++;
	 return token;
  }

/** Get the specific Token. */
  static final public Token getToken(int index) {
	 Token t = token;
	 for (int i = 0; i < index; i++) {
	   if (t.next != null) t = t.next;
	   else t = t.next = token_source.getNextToken();
	 }
	 return t;
  }

  static private int jj_ntk_f() {
	 if ((jj_nt=token.next) == null)
	   return (jj_ntk = (token.next=token_source.getNextToken()).kind);
	 else
	   return (jj_ntk = jj_nt.kind);
  }

  static private java.util.List<int[]> jj_expentries = new java.util.ArrayList<int[]>();
  static private int[] jj_expentry;
  static private int jj_kind = -1;
  static private int[] jj_lasttokens = new int[100];
  static private int jj_endpos;

  static private void jj_add_error_token(int kind, int pos) {
	 if (pos >= 100) {
		return;
	 }

	 if (pos == jj_endpos + 1) {
	   jj_lasttokens[jj_endpos++] = kind;
	 } else if (jj_endpos != 0) {
	   jj_expentry = new int[jj_endpos];

	   for (int i = 0; i < jj_endpos; i++) {
		 jj_expentry[i] = jj_lasttokens[i];
	   }

	   for (int[] oldentry : jj_expentries) {
		 if (oldentry.length == jj_expentry.length) {
		   boolean isMatched = true;

		   for (int i = 0; i < jj_expentry.length; i++) {
			 if (oldentry[i] != jj_expentry[i]) {
			   isMatched = false;
			   break;
			 }

		   }
		   if (isMatched) {
			 jj_expentries.add(jj_expentry);
			 break;
		   }
		 }
	   }

	   if (pos != 0) {
		 jj_lasttokens[(jj_endpos = pos) - 1] = kind;
	   }
	 }
  }

  /** Generate ParseException. */
  static public ParseException generateParseException() {
	 jj_expentries.clear();
	 boolean[] la1tokens = new boolean[61];
	 if (jj_kind >= 0) {
	   la1tokens[jj_kind] = true;
	   jj_kind = -1;
	 }
	 for (int i = 0; i < 39; i++) {
	   if (jj_la1[i] == jj_gen) {
		 for (int j = 0; j < 32; j++) {
		   if ((jj_la1_0[i] & (1<<j)) != 0) {
			 la1tokens[j] = true;
		   }
		   if ((jj_la1_1[i] & (1<<j)) != 0) {
			 la1tokens[32+j] = true;
		   }
		 }
	   }
	 }
	 for (int i = 0; i < 61; i++) {
	   if (la1tokens[i]) {
		 jj_expentry = new int[1];
		 jj_expentry[0] = i;
		 jj_expentries.add(jj_expentry);
	   }
	 }
	 jj_endpos = 0;
	 jj_rescan_token();
	 jj_add_error_token(0, 0);
	 int[][] exptokseq = new int[jj_expentries.size()][];
	 for (int i = 0; i < jj_expentries.size(); i++) {
	   exptokseq[i] = jj_expentries.get(i);
	 }
	 return new ParseException(token, exptokseq, tokenImage);
  }

  static private boolean trace_enabled;

/** Trace enabled. */
  static final public boolean trace_enabled() {
	 return trace_enabled;
  }

  /** Enable tracing. */
  static final public void enable_tracing() {
  }

  /** Disable tracing. */
  static final public void disable_tracing() {
  }

  static private void jj_rescan_token() {
	 jj_rescan = true;
	 for (int i = 0; i < 8; i++) {
	   try {
		 JJCalls p = jj_2_rtns[i];

		 do {
		   if (p.gen > jj_gen) {
			 jj_la = p.arg; jj_lastpos = jj_scanpos = p.first;
			 switch (i) {
			   case 0: jj_3_1(); break;
			   case 1: jj_3_2(); break;
			   case 2: jj_3_3(); break;
			   case 3: jj_3_4(); break;
			   case 4: jj_3_5(); break;
			   case 5: jj_3_6(); break;
			   case 6: jj_3_7(); break;
			   case 7: jj_3_8(); break;
			 }
		   }
		   p = p.next;
		 } while (p != null);

		 } catch(LookaheadSuccess ls) { }
	 }
	 jj_rescan = false;
  }

  static private void jj_save(int index, int xla) {
	 JJCalls p = jj_2_rtns[index];
	 while (p.gen > jj_gen) {
	   if (p.next == null) { p = p.next = new JJCalls(); break; }
	   p = p.next;
	 }

	 p.gen = jj_gen + xla - jj_la; 
	 p.first = token;
	 p.arg = xla;
  }

  static final class JJCalls {
	 int gen;
	 Token first;
	 int arg;
	 JJCalls next;
  }

}
